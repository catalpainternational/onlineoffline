###
{% load static %}
###
CACHE_NAME = 'dependencies-cache'
REQUIRED_FILES = [
        "/contactlist/offline/"
        "/contactlist/api/person/"
        "/static/riot/riot+compiler.min.js"
        "{% static 'js/riotcontrol.js' %}"
        "{% static 'js/personstore.js' %}"
        "{% static 'js/requeststore.js' %}"
        "{% static 'jquery/dist/jquery.min.js' %}"
        "{% static 'lawnchair/src/Lawnchair.js' %}"
        "{% static 'lawnchair/src/adapters/indexed-db.js' %}"
        "{% static 'bootstrap/dist/css/bootstrap.min.css' %}"

]

self.addEventListener 'install', (event) ->
  # Perform install step:  loading each required file into cache
  event.waitUntil caches.open(CACHE_NAME).then((cache) ->
    cache.addAll REQUIRED_FILES
  ).then(->
    #  console.log '[install] All required resources have been cached, ' + 'we\'re good!'
    self.skipWaiting()
  )
  return

self.addEventListener 'activate', (event) ->
  #  Calling claim() to force a "controllerchange" event on navigator.serviceWorker
  event.waitUntil self.clients.claim()
  return

self.addEventListener 'fetch', (event) ->

  fail_503 = ->
    new Response('<h1>Service Unavailable</h1>',
      status: 503
      statusText: 'Service Unavailable'
      headers: new Headers('Content-Type': 'text/html'))

  console.log event
  console.log 'WORKER: fetch event in progress.'
#  if event.request.method != 'GET'
#    console.log 'WORKER: fetch event ignored.', event.request.method, event.request.url
#    event.respondWith fail_503()
#    return fail_503()
#  else
  event.respondWith caches.match(event.request).then((cached) ->
    networked = fetch(event.request).then(fetchedFromNetwork, unableToResolve).catch(unableToResolve)

    fetchedFromNetwork = (response) ->
      cacheCopy = response.clone()
      console.log 'WORKER: fetch response from network.', event.request.url
      caches.open('dependencies-cache').then((cache) ->
        cache.put event.request, cacheCopy
        return
      ).then ->
        console.log 'WORKER: fetch response stored in cache.', event.request.url
        return
      # Return the response so that the promise is settled in fulfillment.
      response

    unableToResolve = ->
      console.log 'WORKER: fetch request failed in both cache and network.'
      fail_503()

    console.log 'WORKER: fetch event' + if cached then '(cached)' else '(network)' + event.request.url
    cached or networked
  )

# ---
# generated by js2coffee 2.2.0
