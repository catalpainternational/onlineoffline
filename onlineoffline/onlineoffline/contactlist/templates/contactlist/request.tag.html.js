// Generated by CoffeeScript 1.10.0
(function() {
  var self;

  self = this;

  self.message = 'Requests';

  self.online_status = 'online';

  self.requestCounts = {};

  self.requests = [];

  self.ping = function(e) {
    console.log('ping');
    return console.log(e);
  };

  self.requestStats = function(fieldname) {
    var i, len, r, ref, request, value;
    r = {};
    ref = self.requests;
    for (i = 0, len = ref.length; i < len; i++) {
      request = ref[i];
      value = request[fieldname] || 'undefined';
      r[value] = (r[value] || 0) + 1;
    }
    return self.requestCounts[fieldname] = r;
  };

  self.requestStatsUpdate = function(fieldname) {
    return self.requestStats(fieldname);
  };

  self.on('mount', function() {
    return RiotControl.trigger('unshelve_requests');
  });

  RiotControl.on('requests_changed', function(requests) {
    var i, len, request;
    self.requests = requests;
    console.log(requests);
    for (i = 0, len = requests.length; i < len; i++) {
      request = requests[i];
      console.log(request.action);
      if (request.action === 'immediate' && request.status === 0) {
        request.action = 'inprogress';
        RiotControl.trigger('request_do', request);
      }
    }
    self.requestStatsUpdate('status');
    self.requestStatsUpdate('method');
    self.requestStatsUpdate('modelName');
    return self.update();
  });

  RiotControl.on('request_failed', function(request, jqXHR, textStatus, errorThrown) {
    request.status = jqXHR.status;
    self.update();
    console.log(jqXHR);
    console.log(textStatus);
    return console.log(errorThrown);
  });

  RiotControl.on('request_add', function() {
    return self.update();
  });

  self.clearSuccessfulRequests = function() {
    return self.requests = self.requests.filterByPropertyRange(200, 300);
  };

  self.clearBadRequests = function() {
    return self.requests = self.requests.filterByPropertyRange(400, 500);
  };


  /* Show requests with only a give status or method */

  self.updateFiltering = function() {
    var filter;
    filter = $(self.filtering).val();
    return RiotControl.trigger('updateRequestFiltering', filter);
  };

  self.clearRequests = function() {
    var filter;
    filter = $(self.clearing).val();
    console.log('clearRequests');
    console.log(filter);
    return RiotControl.trigger('clearRequests', filter);
  };

  self.showAllRequests = function() {
    return self.setPropertyByPropertyRange('status', -1, -1, 'hidden');
  };

  self.doAllRequests = function() {
    var i, len, ref, request, results;
    if ((200 < (ref = request.status) && ref <= 400)) {
      results = [];
      for (i = 0, len = requests.length; i < len; i++) {
        request = requests[i];
        results.push(RiotControl.trigger('request_do', request));
      }
      return results;
    }
  };

  self.request_do = function(e) {
    return RiotControl.trigger('request_do', e.item);
  };

  self.request_remove = function(e) {
    return RiotControl.trigger('request_remove', e);
  };

  self.shelve_requests = function() {
    return RiotControl.trigger('shelve_requests');
  };

  self.unshelve_requests = function() {
    return RiotControl.trigger('unshelve_requests');
  };

  self.status_toggle = function() {
    self.online_status = self.online_status === 'online' ? 'offline' : 'online';
    return self.update();
  };

}).call(this);
